// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/c_layer.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class CLayerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CLayerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CLayerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void initialize(
    frame_callback frame_callback,
    int width,
    int height,
  ) {
    return _initialize(
      frame_callback,
      width,
      height,
    );
  }

  late final _initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              frame_callback, ffi.Uint64, ffi.Uint64)>>('initialize');
  late final _initialize =
      _initializePtr.asFunction<void Function(frame_callback, int, int)>();

  void randomScreen(
    int seed,
  ) {
    return _randomScreen(
      seed,
    );
  }

  late final _randomScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint64)>>(
          'randomScreen');
  late final _randomScreen = _randomScreenPtr.asFunction<void Function(int)>();

  void draw_background(
    double zoom,
    int x_offset,
    int y_offset,
  ) {
    return _draw_background(
      zoom,
      x_offset,
      y_offset,
    );
  }

  late final _draw_backgroundPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Double, ffi.Int64, ffi.Int64)>>(
      'draw_background');
  late final _draw_background =
      _draw_backgroundPtr.asFunction<void Function(double, int, int)>();

  void thread_entry_point(
    ffi.Pointer<image_settings> settings,
  ) {
    return _thread_entry_point(
      settings,
    );
  }

  late final _thread_entry_pointPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<image_settings>)>>(
      'thread_entry_point');
  late final _thread_entry_point = _thread_entry_pointPtr
      .asFunction<void Function(ffi.Pointer<image_settings>)>();
}

final class rgba extends ffi.Struct {
  @ffi.Uint8()
  external int r;

  @ffi.Uint8()
  external int g;

  @ffi.Uint8()
  external int b;

  @ffi.Uint8()
  external int a;
}

final class colors extends ffi.Struct {
  external rgba background_color;

  external rgba line_color;

  external rgba widget_color;
}

final class image_settings extends ffi.Struct {
  @ffi.Double()
  external double zoom;

  @ffi.Uint64()
  external int x_offset;

  @ffi.Uint64()
  external int y_offset;
}

final class image extends ffi.Struct {
  @ffi.Uint64()
  external int width;

  @ffi.Uint64()
  external int height;

  external ffi.Pointer<rgba> pixels;
}

final class context extends ffi.Struct {
  external frame_callback frame_callback1;

  external colors colors1;

  external image background;

  external thrd_t thread;

  external mtx_t mutex;
}

typedef frame_callback
    = ffi.Pointer<ffi.NativeFunction<frame_callbackFunction>>;
typedef frame_callbackFunction = ffi.Void Function(ffi.Uint64 width,
    ffi.Uint64 height, ffi.Uint64 data_size, ffi.Pointer<ffi.Void> data);
typedef Dartframe_callbackFunction = void Function(
    int width, int height, int data_size, ffi.Pointer<ffi.Void> data);

final class thrd_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Handle;

  @ffi.Uint32()
  external int _Tid;
}

final class mtx_t extends ffi.Struct {
  @ffi.UintPtr()
  external int _Type;

  external ffi.Pointer<ffi.Void> _Ptr;

  external ffi.Pointer<ffi.Void> _Cv;

  @ffi.Uint32()
  external int _Owner;

  @ffi.Uint32()
  external int _Cnt;
}

const int square_size = 150;

const int square_stroke_thickness = 2;

const int square_stroke_spacing = 25;
