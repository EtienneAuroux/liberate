// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/c_layer.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class CLayerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CLayerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CLayerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int diff(
    int a,
    int b,
  ) {
    return _diff(
      a,
      b,
    );
  }

  late final _diffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('diff');
  late final _diff = _diffPtr.asFunction<int Function(int, int)>();

  void initialize(
    frame_callback frame_callback,
  ) {
    return _initialize(
      frame_callback,
    );
  }

  late final _initializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(frame_callback)>>(
          'initialize');
  late final _initialize =
      _initializePtr.asFunction<void Function(frame_callback)>();

  void test() {
    return _test();
  }

  late final _testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('test');
  late final _test = _testPtr.asFunction<void Function()>();
}

final class context extends ffi.Struct {
  external frame_callback frame_callback1;
}

typedef frame_callback
    = ffi.Pointer<ffi.NativeFunction<frame_callbackFunction>>;
typedef frame_callbackFunction = ffi.Void Function(ffi.Uint64 width,
    ffi.Uint64 height, ffi.Uint64 data_size, ffi.Pointer<ffi.Void> data);
typedef Dartframe_callbackFunction = void Function(
    int width, int height, int data_size, ffi.Pointer<ffi.Void> data);
